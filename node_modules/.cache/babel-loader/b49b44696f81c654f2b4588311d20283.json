{"ast":null,"code":"var _jsxFileName = \"/Users/zrx/Projects/SnippetVault/src/frontend/src/components/admin/newProposal.tsx\";\nimport React from 'react';\nimport Toggler from '../../commonComponents/toggler/toggler';\nimport \"../snippet/snippet.css\";\nimport \"./admin.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockProposals = [{\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  langId: 2,\n  taskId: 1,\n  taskName: \"C#: Replace substring\",\n  date: new Date()\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  langId: 1,\n  proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  taskId: 2,\n  taskName: \"Java: Get last modified times\",\n  date: new Date()\n}, {\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  langId: 1,\n  proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  taskId: 3,\n  taskName: \"Python: Index of first occurrence of substring\",\n  date: new Date()\n}];\n\nfunction NewProposal() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"newProposal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snippetsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snippetsHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetLeftHeader\",\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"taskForHeader\",\n          children: /*#__PURE__*/_jsxDEV(Toggler, {\n            leftChoice: \"Old->new\",\n            rightChoice: \"New->old\",\n            initChosen: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetRightHeader\",\n          children: \"New Proposals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), mockProposals.map((snippet, idx) => {\n        const evenClass = idx % 2 === 0 ? \" evenRow\" : \"\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippet leftSide\" + evenClass,\n            children: snippet.leftCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskContainer\" + evenClass,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskLeft\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: snippet.taskName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 51\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: snippet.date.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 83\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskRight commentButton\",\n              title: \"Accept\",\n              children: \"A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippet rightSide\" + evenClass,\n            children: snippet.proposalCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_c = NewProposal;\nexport default NewProposal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewProposal\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/components/admin/newProposal.tsx"],"names":["React","Toggler","mockProposals","leftCode","proposalCode","langId","taskId","taskName","date","Date","NewProposal","map","snippet","idx","evenClass","toString"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport EditableList from '../../commonComponents/editableList/editableList';\r\nimport HeaderRightButton from '../../commonComponents/headerRightButton/headerRightButton';\r\nimport Toggler from '../../commonComponents/toggler/toggler';\r\nimport Proposal from '../../types/proposal';\r\nimport \"../snippet/snippet.css\"\r\nimport \"./admin.css\"\r\n\r\nconst mockProposals: Proposal[] = [\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", \r\n        proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", langId: 2, \r\n        taskId: 1, taskName: \"C#: Replace substring\", date: new Date(),\r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", langId: 1,\r\n            proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", \r\n        taskId: 2, taskName: \"Java: Get last modified times\", date: new Date(),\r\n    },\r\n    \r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", langId: 1,\r\n        proposalCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", \r\n        taskId: 3, taskName: \"Python: Index of first occurrence of substring\", date: new Date(),\r\n    },\r\n]\r\n\r\n\r\nfunction NewProposal() {\r\n    return (\r\n        <div className=\"newProposal\">\r\n            <div className=\"snippetsContainer\">\r\n                <div className=\"snippetsHeader\">\r\n                    <div className=\"snippetLeftHeader\">&nbsp;</div>\r\n                    <div className=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"New->old\" initChosen={false}>\r\n                                </Toggler></div>\r\n                    <div className=\"snippetRightHeader\">\r\n                        New Proposals\r\n                    </div>\r\n                </div>\r\n                {mockProposals.map((snippet: Proposal, idx: number ) => {\r\n                    const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                    return (<div className=\"snippetContainer\" key={idx}>\r\n                        <div className={\"snippet leftSide\" + evenClass} >{snippet.leftCode}</div>\r\n                        <div className={\"taskContainer\" + evenClass}>\r\n                            <div className=\"taskLeft\">\r\n                            </div>\r\n                            <div className=\"task\"><span>{snippet.taskName}</span> <span>{snippet.date.toString()}</span></div>\r\n                            <div className=\"taskRight commentButton\" title=\"Accept\">\r\n                                A\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"snippet rightSide\" + evenClass}>{snippet.proposalCode}</div>\r\n                    </div>)\r\n                })}\r\n                \r\n            </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default NewProposal"]},"metadata":{},"sourceType":"module"}