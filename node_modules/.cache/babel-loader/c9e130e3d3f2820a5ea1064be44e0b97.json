{"ast":null,"code":"import{useState}from\"react\";import\"./editableList.css\";import{html}from'htm/react';const EditableList=({values,title})=>{const[openIdx,setOpenIdx]=useState(-1);const rowClickHandler=idx=>{if(idx===openIdx){setOpenIdx(-1);}else{setOpenIdx(idx);}};return html`\n        <div class=\"editableListContainer\">\n            <div class=\"editableListHeader\">\n                <div class=\"editableListTitle\"><h5>${title}</h5></div>\n                <div class=\"editableListHeaderButton\">+</div>\n            </div>\n            \n            <ul>\n                ${values.map((v,idx)=>{return html`\n                        <li key=${idx} class=\"editableListRow\">\n                            <div onClick=${()=>rowClickHandler(idx)} class=${openIdx===idx?\" editableListRowActive\":\"\"}>\n                                <span class=\"editableListCell\">${v.name}</span>\n                            </div>\n                            ${openIdx===idx&&html`\n                                <ul>\n                                    ${Object.keys(v).map((k,idxKey)=>{return html`\n                                            <li key=${idxKey} class=\"editableListEdit\">\n                                                <span><label>${k}</label></span>\n                                                <span><input type=\"text\" defaultValue=${v[k]} onFocus=${event=>event.target.select()} />\n                                                </span>\n                                                <span><button>Save</button></span>                                            \n                                            </li>`;})}\n                                </ul>\n                            `}\n                        </li>\n                    `;})}\n            </ul>\n        </div>\n    `;};export default EditableList;","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/commonComponents/editableList/editableList.ts"],"names":["useState","html","EditableList","values","title","openIdx","setOpenIdx","rowClickHandler","idx","map","v","name","Object","keys","k","idxKey","event","target","select"],"mappings":"AAAA,OAASA,QAAT,KAAyB,OAAzB,CAGA,MAAO,oBAAP,CACA,OAASC,IAAT,KAAqB,WAArB,CAQA,KAAMC,CAAAA,YAAY,CAAG,CAAkC,CAACC,MAAD,CAASC,KAAT,CAAlC,GAAkE,CACnF,KAAM,CAACC,OAAD,CAAUC,UAAV,EAAwBN,QAAQ,CAAC,CAAC,CAAF,CAAtC,CACA,KAAMO,CAAAA,eAAe,CAAIC,GAAD,EAAiB,CACrC,GAAIA,GAAG,GAAKH,OAAZ,CAAqB,CACjBC,UAAU,CAAC,CAAC,CAAF,CAAV,CACH,CAFD,IAEO,CACHA,UAAU,CAACE,GAAD,CAAV,CACH,CACJ,CAND,CAQA,MAAOP,CAAAA,IAAK;AAChB;AACA;AACA,qDAAqDG,KAAM;AAC3D;AACA;AACA;AACA;AACA,kBAAkBD,MAAM,CAACM,GAAP,CAAW,CAACC,CAAD,CAAOF,GAAP,GAAuB,CAChC,MAAOP,CAAAA,IAAK;AAChC,kCAAkCO,GAAI;AACtC,2CAA2C,IAAMD,eAAe,CAACC,GAAD,CAAM,UAAUH,OAAO,GAAKG,GAAZ,CAAkB,wBAAlB,CAA6C,EAAI;AACjI,iEAAiEE,CAAC,CAACC,IAAK;AACxE;AACA,8BAA8BN,OAAO,GAAKG,GAAZ,EAAmBP,IAAK;AACtD;AACA,sCAAsCW,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeD,GAAf,CAAmB,CAACK,CAAD,CAAYC,MAAZ,GAA+B,CAChD,MAAOd,CAAAA,IAAK;AACpD,sDAAsDc,MAAO;AAC7D,+DAA+DD,CAAE;AACjE,wFAAwFJ,CAAC,CAACI,CAAD,CAAI,YAAYE,KAAD,EAAeA,KAAK,CAACC,MAAN,CAAaC,MAAb,EAAsB;AAC7I;AACA;AACA,kDANwC,CAOH,CARC,CAQC;AACvC;AACA,6BAA8B;AAC9B;AACA,qBAnBoB,CAmBE,CApBJ,CAqBA;AAClB;AACA;AACA,KAhCI,CAiCH,CA3CD,CA8CA,cAAehB,CAAAA,YAAf","sourcesContent":["import { useState } from \"react\"\r\nimport HasName from \"../../interfaces/hasName\"\r\nimport StringKeyed from \"../../interfaces/stringKeyed\"\r\nimport \"./editableList.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\ntype Props<T extends StringKeyed & HasName> = {\r\n    values: T[],\r\n    title: string,\r\n}\r\n\r\nconst EditableList = <T extends StringKeyed & HasName>({values, title, }: Props<T>) => {\r\n    const [openIdx, setOpenIdx] = useState(-1)\r\n    const rowClickHandler = (idx: number) => {\r\n        if (idx === openIdx) {\r\n            setOpenIdx(-1)\r\n        } else {\r\n            setOpenIdx(idx)\r\n        }\r\n    }\r\n\r\n    return html`\r\n        <div class=\"editableListContainer\">\r\n            <div class=\"editableListHeader\">\r\n                <div class=\"editableListTitle\"><h5>${title}</h5></div>\r\n                <div class=\"editableListHeaderButton\">+</div>\r\n            </div>\r\n            \r\n            <ul>\r\n                ${values.map((v: T, idx: number) => {\r\n                    return html`\r\n                        <li key=${idx} class=\"editableListRow\">\r\n                            <div onClick=${() => rowClickHandler(idx)} class=${(openIdx === idx ? \" editableListRowActive\" : \"\")}>\r\n                                <span class=\"editableListCell\">${v.name}</span>\r\n                            </div>\r\n                            ${openIdx === idx && html`\r\n                                <ul>\r\n                                    ${Object.keys(v).map((k: string, idxKey: number) => {\r\n                                        return html`\r\n                                            <li key=${idxKey} class=\"editableListEdit\">\r\n                                                <span><label>${k}</label></span>\r\n                                                <span><input type=\"text\" defaultValue=${v[k]} onFocus=${(event:any) => event.target.select()} />\r\n                                                </span>\r\n                                                <span><button>Save</button></span>                                            \r\n                                            </li>`\r\n                                    })}\r\n                                </ul>\r\n                            `}\r\n                        </li>\r\n                    `}\r\n                )}\r\n            </ul>\r\n        </div>\r\n    `\r\n}\r\n\r\n\r\nexport default EditableList"]},"metadata":{},"sourceType":"module"}