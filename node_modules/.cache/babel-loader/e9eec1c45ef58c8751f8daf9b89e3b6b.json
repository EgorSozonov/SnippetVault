{"ast":null,"code":"import\"../snippet/snippet.css\";import{html}from'htm/react';const mockAlternatives=[{leftCode:\"str3 = str1.replace(str2, \\\"bcjk\\\");\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:1,taskName:\"Replace substring\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"    if (it is FileInfo) {\\n\"+\"        fNames[i, 0] = it.Name;\\n\"+\"        fNames[i, 1] = dirInfo.FullName;\\n\"+\"        fDates[i, 0] = it.LastWriteTime;\\n\"+\"    }\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:2,taskName:\"Get last modified times\"},{leftCode:\"str3 = str1.replace(str2, \\\"bcjk\\\");\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:3,taskName:\"Index of first occurrence of substring\"},{leftCode:\"int index = str.LastIndexOf(\\\"bz\\\");\",leftId:1,rightCode:\"\",rightId:2,taskId:4,taskName:\"Index of last occurrence of substring\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"if (it is FileInfo) {\\n\"+\"fNames[i, 0] = it.Name;\\n\"+\"fNames[i, 1] = dirInfo.FullName;\\n\"+\"fDates[i, 0] = it.LastWriteTime;\\n\"+\"}\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:5,taskName:\"Get last modified times\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"if (it is FileInfo) {\\n\"+\"fNames[i, 0] = it.Name;\\n\"+\"fNames[i, 1] = dirInfo.FullName;\\n\"+\"fDates[i, 0] = it.LastWriteTime;\\n\"+\"}\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:6,taskName:\"Get last modified times\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"if (it is FileInfo) {\\n\"+\"fNames[i, 0] = it.Name;\\n\"+\"fNames[i, 1] = dirInfo.FullName;\\n\"+\"fDates[i, 0] = it.LastWriteTime;\\n\"+\"}\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:7,taskName:\"Get last modified times\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"if (it is FileInfo) {\\n\"+\"fNames[i, 0] = it.Name;\\n\"+\"fNames[i, 1] = dirInfo.FullName;\\n\"+\"fDates[i, 0] = it.LastWriteTime;\\n\"+\"}\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:8,taskName:\"Get last modified times\"},{leftCode:\"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"+\"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"+\"foreach (FileSystemInfo it in fInfos) {\\n\"+\"if (it is FileInfo) {\\n\"+\"fNames[i, 0] = it.Name;\\n\"+\"fNames[i, 1] = dirInfo.FullName;\\n\"+\"fDates[i, 0] = it.LastWriteTime;\\n\"+\"}\\n\"+\"}\",leftId:1,rightCode:\"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",rightId:2,taskId:9,taskName:\"Get last modified times\"}];function Alternative(){return html`\n        <div class=\"adminAlternative\">\n            \n            <div class=\"snippetsContainer\">\n                <div class=\"snippetsHeader\">\n                    <div class=\"snippetLeftHeader\">\n                        Alternatives\n                    </div>\n                    <div class=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"Highest votes first\" initChosen={false}>\n                                </Toggler></div>\n                    <div class=\"snippetRightHeader\">\n                        &nbsp;\n                    </div>\n                </div>\n                ${mockAlternatives.map((snippet,idx)=>{const evenClass=idx%2===0?\" evenRow\":\"\";return html`\n                        <div class=\"snippetContainer\" key={idx}>\n                            <div class=${\"snippet leftSide\"+evenClass}>${snippet.leftCode}</div>\n                            <div class=${\"taskContainer\"+evenClass}>\n                                <div class=\"taskLeft\">\n                                </div>\n                                <div class=\"task\">${snippet.taskName}</div>\n                                <div class=\"taskRight commentButton\" title=\"Promote to main version\">\n                                    P\n                                </div>\n                            </div>\n                            <div class=${\"snippet rightSide\"+evenClass}>${snippet.rightCode}</div>\n                        </div>\n                        `;})}\n                \n            </div>\n\n        </div>\n    `;}export default Alternative;","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/components/admin/alternative.ts"],"names":["html","mockAlternatives","leftCode","leftId","rightCode","rightId","taskId","taskName","Alternative","map","snippet","idx","evenClass"],"mappings":"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","sourcesContent":["import Toggler from '../../commonComponents/toggler/toggler';\r\nimport HeaderRightButton from '../../commonComponents/headerRightButton/headerRightButton';\r\nimport Snippet from '../../types/snippet';\r\nimport \"../snippet/snippet.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\nconst mockAlternatives: Snippet[] = [\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 1, taskName: \"Replace substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"    if (it is FileInfo) {\\n\"\r\n            + \"        fNames[i, 0] = it.Name;\\n\"\r\n            + \"        fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"        fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"    }\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 2, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 3, taskName: \"Index of first occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\", leftId: 1,\r\n        rightCode: \"\", rightId: 2, \r\n        taskId: 4, taskName: \"Index of last occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 5, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 6, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 7, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 8, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 9, taskName: \"Get last modified times\", \r\n    },\r\n]\r\n\r\nfunction Alternative() {\r\n    return html`\r\n        <div class=\"adminAlternative\">\r\n            \r\n            <div class=\"snippetsContainer\">\r\n                <div class=\"snippetsHeader\">\r\n                    <div class=\"snippetLeftHeader\">\r\n                        Alternatives\r\n                    </div>\r\n                    <div class=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"Highest votes first\" initChosen={false}>\r\n                                </Toggler></div>\r\n                    <div class=\"snippetRightHeader\">\r\n                        &nbsp;\r\n                    </div>\r\n                </div>\r\n                ${mockAlternatives.map((snippet: Snippet, idx: number ) => {\r\n                    const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                    return html`\r\n                        <div class=\"snippetContainer\" key={idx}>\r\n                            <div class=${\"snippet leftSide\" + evenClass}>${snippet.leftCode}</div>\r\n                            <div class=${\"taskContainer\" + evenClass}>\r\n                                <div class=\"taskLeft\">\r\n                                </div>\r\n                                <div class=\"task\">${snippet.taskName}</div>\r\n                                <div class=\"taskRight commentButton\" title=\"Promote to main version\">\r\n                                    P\r\n                                </div>\r\n                            </div>\r\n                            <div class=${\"snippet rightSide\" + evenClass}>${snippet.rightCode}</div>\r\n                        </div>\r\n                        `\r\n                })}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    `\r\n}\r\n\r\nexport default Alternative"]},"metadata":{},"sourceType":"module"}