{"ast":null,"code":"var _jsxFileName = \"/Users/zrx/Projects/SnippetVault.WEB/src/components/admin/alternative.tsx\";\nimport Toggler from '../../commonComponents/toggler/toggler';\nimport \"../snippet/snippet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockAlternatives = [{\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 1,\n  taskName: \"Replace substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"    if (it is FileInfo) {\\n\" + \"        fNames[i, 0] = it.Name;\\n\" + \"        fNames[i, 1] = dirInfo.FullName;\\n\" + \"        fDates[i, 0] = it.LastWriteTime;\\n\" + \"    }\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 2,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 3,\n  taskName: \"Index of first occurrence of substring\"\n}, {\n  leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\",\n  leftId: 1,\n  rightCode: \"\",\n  rightId: 2,\n  taskId: 4,\n  taskName: \"Index of last occurrence of substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 5,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 6,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 7,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 8,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 9,\n  taskName: \"Get last modified times\"\n}];\n\nfunction Alternative() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"adminAlternative\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snippetsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snippetsHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetLeftHeader\",\n          children: \"Alternatives\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"taskForHeader\",\n          children: /*#__PURE__*/_jsxDEV(Toggler, {\n            leftChoice: \"Old->new\",\n            rightChoice: \"Highest votes first\",\n            initChosen: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetRightHeader\",\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), mockAlternatives.map((snippet, idx) => {\n        const evenClass = idx % 2 === 0 ? \" evenRow\" : \"\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippet leftSide\" + evenClass,\n            children: snippet.leftCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskContainer\" + evenClass,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskLeft\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task\",\n              children: snippet.taskName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskRight commentButton\",\n              title: \"Promote to main version\",\n              children: \"P\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippet rightSide\" + evenClass,\n            children: snippet.rightCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Alternative;\nexport default Alternative;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alternative\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault.WEB/src/components/admin/alternative.tsx"],"names":["Toggler","mockAlternatives","leftCode","leftId","rightCode","rightId","taskId","taskName","Alternative","map","snippet","idx","evenClass"],"mappings":"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","sourcesContent":["import Toggler from '../../commonComponents/toggler/toggler';\r\nimport HeaderRightButton from '../../commonComponents/headerRightButton/headerRightButton';\r\nimport Snippet from '../../types/snippet';\r\nimport \"../snippet/snippet.css\"\r\n\r\n\r\nconst mockAlternatives: Snippet[] = [\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 1, taskName: \"Replace substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"    if (it is FileInfo) {\\n\"\r\n            + \"        fNames[i, 0] = it.Name;\\n\"\r\n            + \"        fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"        fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"    }\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 2, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 3, taskName: \"Index of first occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\", leftId: 1,\r\n        rightCode: \"\", rightId: 2, \r\n        taskId: 4, taskName: \"Index of last occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 5, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 6, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 7, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 8, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 9, taskName: \"Get last modified times\", \r\n    },\r\n]\r\n\r\nfunction Alternative() {\r\n    return (\r\n        <div className=\"adminAlternative\">\r\n            \r\n            <div className=\"snippetsContainer\">\r\n                <div className=\"snippetsHeader\">\r\n                    <div className=\"snippetLeftHeader\">\r\n                        Alternatives\r\n                    </div>\r\n                    <div className=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"Highest votes first\" initChosen={false}>\r\n                                </Toggler></div>\r\n                    <div className=\"snippetRightHeader\">\r\n                        &nbsp;\r\n                    </div>\r\n                </div>\r\n                {mockAlternatives.map((snippet: Snippet, idx: number ) => {\r\n                    const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                    return (<div className=\"snippetContainer\" key={idx}>\r\n                        <div className={\"snippet leftSide\" + evenClass} >{snippet.leftCode}</div>\r\n                        <div className={\"taskContainer\" + evenClass}>\r\n                            <div className=\"taskLeft\">\r\n                            </div>\r\n                            <div className=\"task\">{snippet.taskName}</div>\r\n                            <div className=\"taskRight commentButton\" title=\"Promote to main version\">\r\n                                P\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"snippet rightSide\" + evenClass}>{snippet.rightCode}</div>\r\n                    </div>)\r\n                })}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Alternative"]},"metadata":{},"sourceType":"module"}