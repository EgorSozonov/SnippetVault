{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from './header';\nimport TextInput from \"./textInput\";\nimport './snippet.css';\nimport SnippetCode from './snippetCode';\nimport createClient from '../../client';\nimport { html } from 'htm/react';\n\nfunction SnippetPg() {\n  _s();\n\n  console.log(\"SnippetPg\");\n  const lang1 = useSelector(state => state.language1);\n  const lang2 = useSelector(state => state.language2);\n  const taskGroup = useSelector(state => state.taskGroup);\n  const [snippets, setSnippets] = useState([]);\n  const client = createClient();\n  useEffect(() => {\n    client.get(`{ENDPOINTS.get.snippet}${lang1}/${lang2}/${taskGroup}`).then(r => {\n      console.log(\"Response\");\n      console.dir(r);\n\n      if (r.data) {\n        setSnippets(r.data);\n      }\n    }).catch(e => {\n      console.log(\"Error\");\n      console.dir(e);\n    });\n  }, [lang1, lang2, taskGroup]);\n  return html`<div class=\"snippetsBody\">\n        <${Header} />\n        <main class=\"snippetsContainer\">\n            <div class=\"snippetsHeader\">\n                <div class=\"snippetLeftHeader\">${lang1}</div>\n                <div class=\"taskForHeader\">${taskGroup}</div>\n                <div class=\"snippetRightHeader\">${lang2}</div>\n            </div>\n            ${snippets && snippets.map((snippet, idx) => {\n    const evenClass = idx % 2 === 0 ? \" evenRow\" : \"\";\n    return html`\n                    <div class=\"snippetRow\" key=${idx}>\n                        <div class=${\"snippetContent leftSide\" + evenClass}>\n                            ${snippet.leftCode.length > 0 ? html`<${SnippetCode} content=${snippet.leftCode} isRight=\"false\"><//>` : html`<${TextInput} numberProposals=\"4\"><//>`}\n                        </div>\n                        <div class=${\"taskContainer\" + evenClass}>\n                            ${snippet.taskName}\n                        </div>\n                        <div class=${\"snippetContent rightSide\" + evenClass}>\n                            ${snippet.rightCode.length > 0 ? html`<${SnippetCode} content=${snippet.rightCode} isRight={true}><//>` : html`<${TextInput} numberProposals=\"4\"><//>`}\n                        </div>\n                    </div>`;\n  })}\n            <div class=\"snippetFooter\">${\"&nbsp;\"}</div>\n        </main>\n    </div>\n    `;\n}\n\n_s(SnippetPg, \"+Hw5HxXsMislaGHPPdPaZ3UZdm4=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = SnippetPg;\nexport default SnippetPg;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnippetPg\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/components/snippet/snippetPg.ts"],"names":["useEffect","useState","useSelector","Header","TextInput","SnippetCode","createClient","html","SnippetPg","console","log","lang1","state","language1","lang2","language2","taskGroup","snippets","setSnippets","client","get","then","r","dir","data","catch","e","map","snippet","idx","evenClass","leftCode","length","taskName","rightCode"],"mappings":";;AAAA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAKA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,eAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,SAASC,IAAT,QAAqB,WAArB;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAMC,KAAK,GAAGT,WAAW,CAAEU,KAAD,IAAoBA,KAAK,CAACC,SAA3B,CAAzB;AACA,QAAMC,KAAK,GAAGZ,WAAW,CAAEU,KAAD,IAAoBA,KAAK,CAACG,SAA3B,CAAzB;AACA,QAAMC,SAAS,GAAGd,WAAW,CAAEU,KAAD,IAAoBA,KAAK,CAACI,SAA3B,CAA7B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAY,EAAZ,CAAxC;AACA,QAAMkB,MAAqB,GAAGb,YAAY,EAA1C;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,MAAM,CAACC,GAAP,CAAY,0BAAyBT,KAAM,IAAGG,KAAM,IAAGE,SAAU,EAAjE,EACCK,IADD,CACOC,CAAD,IAAY;AACdb,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACc,GAAR,CAAYD,CAAZ;;AACA,UAAIA,CAAC,CAACE,IAAN,EAAY;AACRN,QAAAA,WAAW,CAACI,CAAC,CAACE,IAAH,CAAX;AACH;AACJ,KAPD,EAOGC,KAPH,CAOUC,CAAD,IAAY;AACjBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACc,GAAR,CAAYG,CAAZ;AACH,KAVD;AAWH,GAZQ,EAYN,CAACf,KAAD,EAAQG,KAAR,EAAeE,SAAf,CAZM,CAAT;AAgBA,SAAOT,IAAK;AAChB,WAAWJ,MAAO;AAClB;AACA;AACA,iDAAiDQ,KAAM;AACvD,6CAA6CK,SAAU;AACvD,kDAAkDF,KAAM;AACxD;AACA,cAAcG,QAAQ,IAAIA,QAAQ,CAACU,GAAT,CAAa,CAACC,OAAD,EAAmBC,GAAnB,KAAoC;AAC3D,UAAMC,SAAS,GAAID,GAAG,GAAC,CAAJ,KAAU,CAAV,GAAc,UAAd,GAA2B,EAA9C;AACA,WAAOtB,IAAK;AAC5B,kDAAkDsB,GAAI;AACtD,qCAAqC,4BAA4BC,SAAU;AAC3E,8BAA8BF,OAAO,CAACG,QAAR,CAAiBC,MAAjB,GAA0B,CAA1B,GACIzB,IAAK,IAAGF,WAAY,YAAWuB,OAAO,CAACG,QAAS,uBADpD,GAEIxB,IAAK,IAAGH,SAAU,2BAA2B;AAC/E;AACA,qCAAqC,kBAAkB0B,SAAU;AACjE,8BAA8BF,OAAO,CAACK,QAAS;AAC/C;AACA,qCAAqC,6BAA6BH,SAAU;AAC5E,8BAA8BF,OAAO,CAACM,SAAR,CAAkBF,MAAlB,GAA2B,CAA3B,GACIzB,IAAK,IAAGF,WAAY,YAAWuB,OAAO,CAACM,SAAU,sBADrD,GAEI3B,IAAK,IAAGH,SAAU,2BAA2B;AAC/E;AACA,2BAfgB;AAgBH,GAlBa,CAkBX;AACf,yCAAyC,QAAS;AAClD;AACA;AACA,KA9BI;AA+BH;;GAtDQI,S;UAESN,W,EACAA,W,EACIA,W;;;KAJbM,S;AAwDT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport HoverSelect from '../../commonComponents/hoverSelect/hoverSelect';\r\nimport Toggler from '../../commonComponents/toggler/toggler';\r\nimport { SVState } from '../../redux/state';\r\nimport Snippet from '../../types/snippet';\r\nimport Header from './header'\r\nimport TextInput from \"./textInput\"\r\nimport './snippet.css'\r\nimport SnippetCode from './snippetCode';\r\nimport ENDPOINTS from '../../url';\r\nimport createClient from '../../client';\r\nimport { AxiosInstance } from 'axios';\r\nimport { html } from 'htm/react'\r\n\r\n\r\nfunction SnippetPg() {\r\n    console.log(\"SnippetPg\")\r\n    const lang1 = useSelector((state: SVState) => state.language1)\r\n    const lang2 = useSelector((state: SVState) => state.language2)\r\n    const taskGroup = useSelector((state: SVState) => state.taskGroup)\r\n    const [snippets, setSnippets] = useState<Snippet[]>([])\r\n    const client: AxiosInstance = createClient()\r\n    useEffect(() => {\r\n        client.get(`{ENDPOINTS.get.snippet}${lang1}/${lang2}/${taskGroup}`)\r\n        .then((r: any) => {\r\n            console.log(\"Response\")\r\n            console.dir(r)\r\n            if (r.data) {\r\n                setSnippets(r.data)\r\n            }\r\n        }).catch((e: any) => {\r\n            console.log(\"Error\")\r\n            console.dir(e)\r\n        })\r\n    }, [lang1, lang2, taskGroup])\r\n\r\n\r\n\r\n    return html`<div class=\"snippetsBody\">\r\n        <${Header} />\r\n        <main class=\"snippetsContainer\">\r\n            <div class=\"snippetsHeader\">\r\n                <div class=\"snippetLeftHeader\">${lang1}</div>\r\n                <div class=\"taskForHeader\">${taskGroup}</div>\r\n                <div class=\"snippetRightHeader\">${lang2}</div>\r\n            </div>\r\n            ${snippets && snippets.map((snippet: Snippet, idx: number ) => {\r\n                const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                return html`\r\n                    <div class=\"snippetRow\" key=${idx}>\r\n                        <div class=${\"snippetContent leftSide\" + evenClass}>\r\n                            ${snippet.leftCode.length > 0 \r\n                                ? html`<${SnippetCode} content=${snippet.leftCode} isRight=\"false\"><//>`\r\n                                : html`<${TextInput} numberProposals=\"4\"><//>`}\r\n                        </div>\r\n                        <div class=${\"taskContainer\" + evenClass}>\r\n                            ${snippet.taskName}\r\n                        </div>\r\n                        <div class=${\"snippetContent rightSide\" + evenClass}>\r\n                            ${snippet.rightCode.length > 0 \r\n                                ? html`<${SnippetCode} content=${snippet.rightCode} isRight={true}><//>`\r\n                                : html`<${TextInput} numberProposals=\"4\"><//>`}\r\n                        </div>\r\n                    </div>`\r\n            })}\r\n            <div class=\"snippetFooter\">${\"&nbsp;\"}</div>\r\n        </main>\r\n    </div>\r\n    `\r\n}\r\n\r\nexport default SnippetPg"]},"metadata":{},"sourceType":"module"}