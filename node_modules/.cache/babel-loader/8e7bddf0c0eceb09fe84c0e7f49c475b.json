{"ast":null,"code":"import{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import\"./hoverSelect.css\";import{html}from'htm/react';const HoverSelect=({choices,uniqueName,selectCallback})=>{const[currValue,setCurrValue]=useState(\" \");const currentlyOpen=useSelector(state=>state.openSelect);const dispatch=useDispatch();const isOpen=currentlyOpen===uniqueName;const onSelect=c=>{setCurrValue(c);selectCallback(c);dispatch({type:\"changeSelect\",payload:{selectName:\"\"}});};const onClickHeader=()=>{if(isOpen){dispatch({type:\"changeSelect\",payload:{selectName:\"\"}});}else{dispatch({type:\"changeSelect\",payload:{selectName:uniqueName}});}};return html`\n        <div class=\"hoverSelect\" onMouseEnter=${()=>dispatch({type:\"changeSelect\",payload:{selectName:uniqueName}})}\n                onMouseLeave=${()=>dispatch({type:\"changeSelect\",payload:{selectName:\"\"}})}>            \n            <span class=\"search\" onClick=${onClickHeader}>\n                <span class=${\"leftButton\"+(isOpen?\" hoverSelectActive\":\" hoverSelectInactive\")}>(-)</span>\n                <span class=\"rightLabel\">${currValue}</span>\n            </span>\n            {isOpen && \n                <div class=\"menu\">\n                    <ul class=\"list\">\n                        <li>\n                            <ul class=\"optgroup\">\n                                ${choices.map((c,idx)=>{return html`<li key=${idx} onClick=${()=>onSelect(c)}>{c}</li>`;})}\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n            }\n        </div>\n    `;};export default HoverSelect;","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/commonComponents/hoverSelect/hoverSelect.ts"],"names":["useState","useDispatch","useSelector","html","HoverSelect","choices","uniqueName","selectCallback","currValue","setCurrValue","currentlyOpen","state","openSelect","dispatch","isOpen","onSelect","c","type","payload","selectName","onClickHeader","map","idx"],"mappings":"AAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAO,mBAAP,CACA,OAASC,IAAT,KAAqB,WAArB,CASA,KAAMC,CAAAA,WAA2C,CAAG,CAAC,CAACC,OAAD,CAAUC,UAAV,CAAsBC,cAAtB,CAAD,GAA6C,CAC7F,KAAM,CAACC,SAAD,CAAYC,YAAZ,EAA4BT,QAAQ,CAAC,GAAD,CAA1C,CACA,KAAMU,CAAAA,aAAa,CAAGR,WAAW,CAAES,KAAD,EAAoBA,KAAK,CAACC,UAA3B,CAAjC,CACA,KAAMC,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CACA,KAAMa,CAAAA,MAAM,CAAGJ,aAAa,GAAKJ,UAAjC,CAEA,KAAMS,CAAAA,QAAQ,CAAIC,CAAD,EAAe,CAC5BP,YAAY,CAACO,CAAD,CAAZ,CACAT,cAAc,CAACS,CAAD,CAAd,CACAH,QAAQ,CAAC,CAACI,IAAI,CAAE,cAAP,CAAuBC,OAAO,CAAE,CAACC,UAAU,CAAE,EAAb,CAAhC,CAAD,CAAR,CACH,CAJD,CAMA,KAAMC,CAAAA,aAAa,CAAG,IAAM,CACxB,GAAIN,MAAJ,CAAY,CACRD,QAAQ,CAAC,CAACI,IAAI,CAAE,cAAP,CAAuBC,OAAO,CAAE,CAACC,UAAU,CAAE,EAAb,CAAhC,CAAD,CAAR,CACH,CAFD,IAEO,CACHN,QAAQ,CAAC,CAACI,IAAI,CAAE,cAAP,CAAuBC,OAAO,CAAE,CAACC,UAAU,CAAEb,UAAb,CAAhC,CAAD,CAAR,CACH,CACJ,CAND,CAOA,MAAOH,CAAAA,IAAK;AAChB,gDAAgD,IAAMU,QAAQ,CAAC,CAACI,IAAI,CAAE,cAAP,CAAuBC,OAAO,CAAE,CAACC,UAAU,CAAEb,UAAb,CAAhC,CAAD,CAA8D;AAC5H,+BAA+B,IAAMO,QAAQ,CAAC,CAACI,IAAI,CAAE,cAAP,CAAuBC,OAAO,CAAE,CAACC,UAAU,CAAE,EAAb,CAAhC,CAAD,CAAsD;AACnG,2CAA2CC,aAAc;AACzD,8BAA8B,cAAgBN,MAAM,CAAG,oBAAH,CAA0B,sBAAhD,CAAwE;AACtG,2CAA2CN,SAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCH,OAAO,CAACgB,GAAR,CAAY,CAACL,CAAD,CAAYM,GAAZ,GAA4B,CACtC,MAAOnB,CAAAA,IAAK,WAAUmB,GAAI,YAAW,IAAMP,QAAQ,CAACC,CAAD,CAAI,WAAvD,CACH,CAFC,CAEC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KArBI,CAsBH,CAzCD,CA4CA,cAAeZ,CAAAA,WAAf","sourcesContent":["import { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { SVState } from \"../../redux/state\"\r\nimport \"./hoverSelect.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\ntype Props = {\r\n    choices: string[],\r\n    uniqueName: string,\r\n    selectCallback: (c: string) => void,\r\n}\r\n\r\nconst HoverSelect: React.FunctionComponent<Props> = ({choices, uniqueName, selectCallback, }) => {\r\n    const [currValue, setCurrValue] = useState(\" \")\r\n    const currentlyOpen = useSelector((state: SVState) => state.openSelect)\r\n    const dispatch = useDispatch()\r\n    const isOpen = currentlyOpen === uniqueName\r\n\r\n    const onSelect = (c: string) => {\r\n        setCurrValue(c)\r\n        selectCallback(c)\r\n        dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})\r\n    }\r\n\r\n    const onClickHeader = () => {\r\n        if (isOpen) {\r\n            dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})\r\n        } else {\r\n            dispatch({type: \"changeSelect\", payload: {selectName: uniqueName, }})\r\n        }\r\n    }\r\n    return html`\r\n        <div class=\"hoverSelect\" onMouseEnter=${() => dispatch({type: \"changeSelect\", payload: {selectName: uniqueName, }})}\r\n                onMouseLeave=${() => dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})}>            \r\n            <span class=\"search\" onClick=${onClickHeader}>\r\n                <span class=${\"leftButton\" + (isOpen ? \" hoverSelectActive\" : \" hoverSelectInactive\")}>(-)</span>\r\n                <span class=\"rightLabel\">${currValue}</span>\r\n            </span>\r\n            {isOpen && \r\n                <div class=\"menu\">\r\n                    <ul class=\"list\">\r\n                        <li>\r\n                            <ul class=\"optgroup\">\r\n                                ${choices.map((c: string, idx: number) => {\r\n                                    return html`<li key=${idx} onClick=${() => onSelect(c)}>{c}</li>`\r\n                                })}\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    `\r\n}\r\n\r\n\r\nexport default HoverSelect"]},"metadata":{},"sourceType":"module"}