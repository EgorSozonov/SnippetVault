{"ast":null,"code":"import \"../snippet/snippet.css\";\nimport { html } from 'htm/react';\nconst mockAlternatives = [{\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 1,\n  taskName: \"Replace substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"    if (it is FileInfo) {\\n\" + \"        fNames[i, 0] = it.Name;\\n\" + \"        fNames[i, 1] = dirInfo.FullName;\\n\" + \"        fDates[i, 0] = it.LastWriteTime;\\n\" + \"    }\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 2,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 3,\n  taskName: \"Index of first occurrence of substring\"\n}, {\n  leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\",\n  leftId: 1,\n  rightCode: \"\",\n  rightId: 2,\n  taskId: 4,\n  taskName: \"Index of last occurrence of substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 5,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 6,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 7,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 8,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 9,\n  taskName: \"Get last modified times\"\n}];\n\nfunction Alternative() {\n  return html`\n        <div class=\"adminAlternative\">\n            \n            <div class=\"snippetsContainer\">\n                <div class=\"snippetsHeader\">\n                    <div class=\"snippetLeftHeader\">\n                        Alternatives\n                    </div>\n                    <div class=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"Highest votes first\" initChosen={false}>\n                                </Toggler></div>\n                    <div class=\"snippetRightHeader\">\n                        &nbsp;\n                    </div>\n                </div>\n                ${mockAlternatives.map((snippet, idx) => {\n    const evenClass = idx % 2 === 0 ? \" evenRow\" : \"\";\n    return html`\n                        <div class=\"snippetContainer\" key={idx}>\n                            <div class=${\"snippet leftSide\" + evenClass}>${snippet.leftCode}</div>\n                            <div class=${\"taskContainer\" + evenClass}>\n                                <div class=\"taskLeft\">\n                                </div>\n                                <div class=\"task\">${snippet.taskName}</div>\n                                <div class=\"taskRight commentButton\" title=\"Promote to main version\">\n                                    P\n                                </div>\n                            </div>\n                            <div class=${\"snippet rightSide\" + evenClass}>${snippet.rightCode}</div>\n                        </div>\n                        `;\n  })}\n                \n            </div>\n\n        </div>\n    `;\n}\n\n_c = Alternative;\nexport default Alternative;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alternative\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/components/admin/alternative.ts"],"names":["html","mockAlternatives","leftCode","leftId","rightCode","rightId","taskId","taskName","Alternative","map","snippet","idx","evenClass"],"mappings":"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","sourcesContent":["import Toggler from '../../commonComponents/toggler/toggler';\r\nimport HeaderRightButton from '../../commonComponents/headerRightButton/headerRightButton';\r\nimport Snippet from '../../types/snippet';\r\nimport \"../snippet/snippet.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\nconst mockAlternatives: Snippet[] = [\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 1, taskName: \"Replace substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"    if (it is FileInfo) {\\n\"\r\n            + \"        fNames[i, 0] = it.Name;\\n\"\r\n            + \"        fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"        fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"    }\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 2, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 3, taskName: \"Index of first occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\", leftId: 1,\r\n        rightCode: \"\", rightId: 2, \r\n        taskId: 4, taskName: \"Index of last occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 5, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 6, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 7, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 8, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 9, taskName: \"Get last modified times\", \r\n    },\r\n]\r\n\r\nfunction Alternative() {\r\n    return html`\r\n        <div class=\"adminAlternative\">\r\n            \r\n            <div class=\"snippetsContainer\">\r\n                <div class=\"snippetsHeader\">\r\n                    <div class=\"snippetLeftHeader\">\r\n                        Alternatives\r\n                    </div>\r\n                    <div class=\"taskForHeader\"><Toggler leftChoice=\"Old->new\" rightChoice=\"Highest votes first\" initChosen={false}>\r\n                                </Toggler></div>\r\n                    <div class=\"snippetRightHeader\">\r\n                        &nbsp;\r\n                    </div>\r\n                </div>\r\n                ${mockAlternatives.map((snippet: Snippet, idx: number ) => {\r\n                    const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                    return html`\r\n                        <div class=\"snippetContainer\" key={idx}>\r\n                            <div class=${\"snippet leftSide\" + evenClass}>${snippet.leftCode}</div>\r\n                            <div class=${\"taskContainer\" + evenClass}>\r\n                                <div class=\"taskLeft\">\r\n                                </div>\r\n                                <div class=\"task\">${snippet.taskName}</div>\r\n                                <div class=\"taskRight commentButton\" title=\"Promote to main version\">\r\n                                    P\r\n                                </div>\r\n                            </div>\r\n                            <div class=${\"snippet rightSide\" + evenClass}>${snippet.rightCode}</div>\r\n                        </div>\r\n                        `\r\n                })}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    `\r\n}\r\n\r\nexport default Alternative"]},"metadata":{},"sourceType":"module"}