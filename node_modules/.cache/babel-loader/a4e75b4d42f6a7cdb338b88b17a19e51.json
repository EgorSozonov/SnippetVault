{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./editableList.css\";\nimport { html } from 'htm/react';\n\nconst EditableList = ({\n  values,\n  title\n}) => {\n  _s();\n\n  const [openIdx, setOpenIdx] = useState(-1);\n\n  const rowClickHandler = idx => {\n    if (idx === openIdx) {\n      setOpenIdx(-1);\n    } else {\n      setOpenIdx(idx);\n    }\n  };\n\n  return html`\n        <div class=\"editableListContainer\">\n            <div class=\"editableListHeader\">\n                <div class=\"editableListTitle\"><h5>${title}</h5></div>\n                <div class=\"editableListHeaderButton\">+</div>\n            </div>\n            \n            <ul>\n                ${values.map((v, idx) => {\n    return html`\n                        <li key=${idx} class=\"editableListRow\">\n                            <div onClick=${() => rowClickHandler(idx)} class=${openIdx === idx ? \" editableListRowActive\" : \"\"}>\n                                <span class=\"editableListCell\">${v.name}</span>\n                            </div>\n                            ${openIdx === idx && html`\n                                <ul>\n                                    ${Object.keys(v).map((k, idxKey) => {\n      return html`\n                                            <li key=${idxKey} class=\"editableListEdit\">\n                                                <span><label>${k}</label></span>\n                                                <span><input type=\"text\" defaultValue=${v[k]} onFocus=${event => event.target.select()} />\n                                                </span>\n                                                <span><button>Save</button></span>                                            \n                                            </li>`;\n    })}\n                                </ul>\n                            `}\n                        </li>\n                    `;\n  })}\n            </ul>\n        </div>\n    `;\n};\n\n_s(EditableList, \"xaA+Z+MpxyOyUK2QazoPumINpTk=\");\n\n_c = EditableList;\nexport default EditableList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableList\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/commonComponents/editableList/editableList.ts"],"names":["useState","html","EditableList","values","title","openIdx","setOpenIdx","rowClickHandler","idx","map","v","name","Object","keys","k","idxKey","event","target","select"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAGA,OAAO,oBAAP;AACA,SAASC,IAAT,QAAqB,WAArB;;AAQA,MAAMC,YAAY,GAAG,CAAkC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAlC,KAAkE;AAAA;;AACnF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAC,CAAF,CAAtC;;AACA,QAAMO,eAAe,GAAIC,GAAD,IAAiB;AACrC,QAAIA,GAAG,KAAKH,OAAZ,EAAqB;AACjBC,MAAAA,UAAU,CAAC,CAAC,CAAF,CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,UAAU,CAACE,GAAD,CAAV;AACH;AACJ,GAND;;AAQA,SAAOP,IAAK;AAChB;AACA;AACA,qDAAqDG,KAAM;AAC3D;AACA;AACA;AACA;AACA,kBAAkBD,MAAM,CAACM,GAAP,CAAW,CAACC,CAAD,EAAOF,GAAP,KAAuB;AAChC,WAAOP,IAAK;AAChC,kCAAkCO,GAAI;AACtC,2CAA2C,MAAMD,eAAe,CAACC,GAAD,CAAM,UAAUH,OAAO,KAAKG,GAAZ,GAAkB,wBAAlB,GAA6C,EAAI;AACjI,iEAAiEE,CAAC,CAACC,IAAK;AACxE;AACA,8BAA8BN,OAAO,KAAKG,GAAZ,IAAmBP,IAAK;AACtD;AACA,sCAAsCW,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeD,GAAf,CAAmB,CAACK,CAAD,EAAYC,MAAZ,KAA+B;AAChD,aAAOd,IAAK;AACpD,sDAAsDc,MAAO;AAC7D,+DAA+DD,CAAE;AACjE,wFAAwFJ,CAAC,CAACI,CAAD,CAAI,YAAYE,KAAD,IAAeA,KAAK,CAACC,MAAN,CAAaC,MAAb,EAAsB;AAC7I;AACA;AACA,kDANwC;AAOH,KARC,CAQC;AACvC;AACA,6BAA8B;AAC9B;AACA,qBAnBoB;AAmBE,GApBJ,CAqBA;AAClB;AACA;AACA,KAhCI;AAiCH,CA3CD;;GAAMhB,Y;;KAAAA,Y;AA8CN,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\"\r\nimport HasName from \"../../interfaces/hasName\"\r\nimport StringKeyed from \"../../interfaces/stringKeyed\"\r\nimport \"./editableList.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\ntype Props<T extends StringKeyed & HasName> = {\r\n    values: T[],\r\n    title: string,\r\n}\r\n\r\nconst EditableList = <T extends StringKeyed & HasName>({values, title, }: Props<T>) => {\r\n    const [openIdx, setOpenIdx] = useState(-1)\r\n    const rowClickHandler = (idx: number) => {\r\n        if (idx === openIdx) {\r\n            setOpenIdx(-1)\r\n        } else {\r\n            setOpenIdx(idx)\r\n        }\r\n    }\r\n\r\n    return html`\r\n        <div class=\"editableListContainer\">\r\n            <div class=\"editableListHeader\">\r\n                <div class=\"editableListTitle\"><h5>${title}</h5></div>\r\n                <div class=\"editableListHeaderButton\">+</div>\r\n            </div>\r\n            \r\n            <ul>\r\n                ${values.map((v: T, idx: number) => {\r\n                    return html`\r\n                        <li key=${idx} class=\"editableListRow\">\r\n                            <div onClick=${() => rowClickHandler(idx)} class=${(openIdx === idx ? \" editableListRowActive\" : \"\")}>\r\n                                <span class=\"editableListCell\">${v.name}</span>\r\n                            </div>\r\n                            ${openIdx === idx && html`\r\n                                <ul>\r\n                                    ${Object.keys(v).map((k: string, idxKey: number) => {\r\n                                        return html`\r\n                                            <li key=${idxKey} class=\"editableListEdit\">\r\n                                                <span><label>${k}</label></span>\r\n                                                <span><input type=\"text\" defaultValue=${v[k]} onFocus=${(event:any) => event.target.select()} />\r\n                                                </span>\r\n                                                <span><button>Save</button></span>                                            \r\n                                            </li>`\r\n                                    })}\r\n                                </ul>\r\n                            `}\r\n                        </li>\r\n                    `}\r\n                )}\r\n            </ul>\r\n        </div>\r\n    `\r\n}\r\n\r\n\r\nexport default EditableList"]},"metadata":{},"sourceType":"module"}