{"ast":null,"code":"var _jsxFileName = \"/Users/zrx/Projects/SnippetVault/src/frontend/src/components/snippet/snippetPg.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from './header';\nimport TextInput from \"./textInput\";\nimport './snippet.css';\nimport SnippetCode from './snippetCode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockSnippets = [{\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 1,\n  taskName: \"Replace substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"    if (it is FileInfo) {\\n\" + \"        fNames[i, 0] = it.Name;\\n\" + \"        fNames[i, 1] = dirInfo.FullName;\\n\" + \"        fDates[i, 0] = it.LastWriteTime;\\n\" + \"    }\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 2,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 3,\n  taskName: \"Index of first occurrence of substring\"\n}, {\n  leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\",\n  leftId: 1,\n  rightCode: \"\",\n  rightId: 2,\n  taskId: 4,\n  taskName: \"Index of last occurrence of substring\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"    if (it is FileInfo) {\\n\" + \"        fNames[i, 0] = it.Name;\\n\" + \"        fNames[i, 1] = dirInfo.FullName;\\n\" + \"        fDates[i, 0] = it.LastWriteTime;\\n\" + \"    }\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 5,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 6,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 7,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 8,\n  taskName: \"Get last modified times\"\n}, {\n  leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\" + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\" + \"foreach (FileSystemInfo it in fInfos) {\\n\" + \"if (it is FileInfo) {\\n\" + \"fNames[i, 0] = it.Name;\\n\" + \"fNames[i, 1] = dirInfo.FullName;\\n\" + \"fDates[i, 0] = it.LastWriteTime;\\n\" + \"}\\n\" + \"}\",\n  leftId: 1,\n  rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\",\n  rightId: 2,\n  taskId: 9,\n  taskName: \"Get last modified times\"\n}];\n\nfunction SnippetPg() {\n  _s();\n\n  const lang1 = useSelector(state => state.language1);\n  const lang2 = useSelector(state => state.language2);\n  const taskGroup = useSelector(state => state.taskGroup);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snippetsBody\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"snippetsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snippetsHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetLeftHeader\",\n          children: lang1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"taskForHeader\",\n          children: taskGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetRightHeader\",\n          children: lang2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), mockSnippets.map((snippet, idx) => {\n        const evenClass = idx % 2 === 0 ? \" evenRow\" : \"\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"snippetRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippetContent leftSide\" + evenClass,\n            children: snippet.leftCode.length > 0 ? /*#__PURE__*/_jsxDEV(SnippetCode, {\n              content: snippet.leftCode,\n              isRight: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(TextInput, {\n              numberProposals: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskContainer\" + evenClass,\n            children: snippet.taskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snippetContent rightSide\" + evenClass,\n            children: snippet.rightCode.length > 0 ? /*#__PURE__*/_jsxDEV(SnippetCode, {\n              content: snippet.rightCode,\n              isRight: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(TextInput, {\n              numberProposals: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px;\",\n          backgroundColor: \"#303030\"\n        },\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 13\n  }, this);\n}\n\n_s(SnippetPg, \"3dL+C/8CS5I4k05pMgdpfAHblTY=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = SnippetPg;\nexport default SnippetPg;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnippetPg\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/components/snippet/snippetPg.tsx"],"names":["React","useSelector","Header","TextInput","SnippetCode","mockSnippets","leftCode","leftId","rightCode","rightId","taskId","taskName","SnippetPg","lang1","state","language1","lang2","language2","taskGroup","map","snippet","idx","evenClass","length","marginBottom","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport HoverSelect from '../../commonComponents/hoverSelect/hoverSelect';\r\nimport Toggler from '../../commonComponents/toggler/toggler';\r\nimport { SVState } from '../../redux/state';\r\nimport Snippet from '../../types/snippet';\r\nimport Header from './header'\r\nimport TextInput from \"./textInput\"\r\nimport './snippet.css'\r\nimport SnippetCode from './snippetCode';\r\n\r\n\r\nconst mockSnippets: Snippet[] = [\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 1, taskName: \"Replace substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"    if (it is FileInfo) {\\n\"\r\n            + \"        fNames[i, 0] = it.Name;\\n\"\r\n            + \"        fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"        fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"    }\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 2, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"str3 = str1.replace(str2, \\\"bcjk\\\");\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 3, taskName: \"Index of first occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"int index = str.LastIndexOf(\\\"bz\\\");\", leftId: 1,\r\n        rightCode: \"\", rightId: 2, \r\n        taskId: 4, taskName: \"Index of last occurrence of substring\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"    if (it is FileInfo) {\\n\"\r\n            + \"        fNames[i, 0] = it.Name;\\n\"\r\n            + \"        fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"        fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"    }\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 5, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 6, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 7, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 8, taskName: \"Get last modified times\", \r\n    },\r\n    {\r\n        leftCode: \"DirectoryInfo dirInfo = new DirectoryInfo(thePath);\\n\"\r\n            + \"fInfos = dirInfo.GetFileSystemInfos(\\\"*.CSV\\\");\\n\"\r\n            + \"foreach (FileSystemInfo it in fInfos) {\\n\"\r\n            + \"if (it is FileInfo) {\\n\"\r\n            + \"fNames[i, 0] = it.Name;\\n\"\r\n            + \"fNames[i, 1] = dirInfo.FullName;\\n\"\r\n            + \"fDates[i, 0] = it.LastWriteTime;\\n\"\r\n            + \"}\\n\"\r\n            + \"}\", leftId: 1,\r\n        rightCode: \"str3 = str1.replacingOccurrences(of: str2, with: \\\"bcjk\\\")\", rightId: 2, \r\n        taskId: 9, taskName: \"Get last modified times\",\r\n    },\r\n]\r\n\r\nfunction SnippetPg() {\r\n    const lang1 = useSelector((state: SVState) => state.language1)\r\n    const lang2 = useSelector((state: SVState) => state.language2)\r\n    const taskGroup = useSelector((state: SVState) => state.taskGroup)\r\n    return (<div className=\"snippetsBody\">\r\n        <Header></Header>\r\n        <main className=\"snippetsContainer\">\r\n            <div className=\"snippetsHeader\">\r\n                <div className=\"snippetLeftHeader\">{lang1}</div>\r\n                    <div className=\"taskForHeader\">{taskGroup}</div>\r\n                    <div className=\"snippetRightHeader\">{lang2}</div>\r\n            </div>\r\n            {mockSnippets.map((snippet: Snippet, idx: number ) => {\r\n                const evenClass = (idx%2 === 0 ? \" evenRow\" : \"\")\r\n                return (<div className=\"snippetRow\" key={idx}>\r\n                    <div className={\"snippetContent leftSide\" + evenClass}>\r\n                        {snippet.leftCode.length > 0 \r\n                            ? <SnippetCode content={snippet.leftCode} isRight={false}></SnippetCode>\r\n                            : <TextInput numberProposals={4}></TextInput>}\r\n                    </div>\r\n                    <div className={\"taskContainer\" + evenClass}>\r\n                        {snippet.taskName}\r\n                    </div>\r\n                    <div className={\"snippetContent rightSide\" + evenClass}>\r\n                        {snippet.rightCode.length > 0 \r\n                            ? <SnippetCode content={snippet.rightCode} isRight={true}></SnippetCode>\r\n                            : <TextInput numberProposals={4}></TextInput>}\r\n                    </div>\r\n                </div>)\r\n            })}\r\n            <div style={{marginBottom: \"20px;\", backgroundColor: \"#303030\",  }}>&nbsp;</div>\r\n        </main>\r\n    </div>)\r\n}\r\n\r\nexport default SnippetPg"]},"metadata":{},"sourceType":"module"}