{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./hoverSelect.css\";\nimport { html } from 'htm/react';\n\nconst HoverSelect = ({\n  choices,\n  uniqueName,\n  selectCallback\n}) => {\n  _s();\n\n  const [currValue, setCurrValue] = useState(\" \");\n  const currentlyOpen = useSelector(state => state.openSelect);\n  const dispatch = useDispatch();\n  const isOpen = currentlyOpen === uniqueName;\n\n  const onSelect = c => {\n    setCurrValue(c);\n    selectCallback(c);\n    dispatch({\n      type: \"changeSelect\",\n      payload: {\n        selectName: \"\"\n      }\n    });\n  };\n\n  const onClickHeader = () => {\n    if (isOpen) {\n      dispatch({\n        type: \"changeSelect\",\n        payload: {\n          selectName: \"\"\n        }\n      });\n    } else {\n      dispatch({\n        type: \"changeSelect\",\n        payload: {\n          selectName: uniqueName\n        }\n      });\n    }\n  };\n\n  return html`\n        <div class=\"hoverSelect\" onMouseEnter=${() => dispatch({\n    type: \"changeSelect\",\n    payload: {\n      selectName: uniqueName\n    }\n  })}\n                onMouseLeave=${() => dispatch({\n    type: \"changeSelect\",\n    payload: {\n      selectName: \"\"\n    }\n  })}>            \n            <span class=\"search\" onClick=${onClickHeader}>\n                <span class=${\"leftButton\" + (isOpen ? \" hoverSelectActive\" : \" hoverSelectInactive\")}>(-)</span>\n                <span class=\"rightLabel\">${currValue}</span>\n            </span>\n            \n            <div class=${isOpen ? \"hoverSelectMenuActive\" : \"hoverSelectMenu\"}>\n                <ul class=\"list\">\n                    <li>\n                        <ul class=\"optgroup\">\n                            ${choices.map((c, idx) => {\n    return html`<li key=${idx} onClick=${() => onSelect(c)}>${c}</li>`;\n  })}\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n                \n            \n        </div>\n    `;\n};\n\n_s(HoverSelect, \"p0g6I7PyNCPSEPaexr+9kdWnQDE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = HoverSelect;\nexport default HoverSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"HoverSelect\");","map":{"version":3,"sources":["/Users/zrx/Projects/SnippetVault/src/frontend/src/commonComponents/hoverSelect/hoverSelect.ts"],"names":["useState","useDispatch","useSelector","html","HoverSelect","choices","uniqueName","selectCallback","currValue","setCurrValue","currentlyOpen","state","openSelect","dispatch","isOpen","onSelect","c","type","payload","selectName","onClickHeader","map","idx"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,mBAAP;AACA,SAASC,IAAT,QAAqB,WAArB;;AASA,MAAMC,WAA2C,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAA6C;AAAA;;AAC7F,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,GAAD,CAA1C;AACA,QAAMU,aAAa,GAAGR,WAAW,CAAES,KAAD,IAAoBA,KAAK,CAACC,UAA3B,CAAjC;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,MAAM,GAAGJ,aAAa,KAAKJ,UAAjC;;AAEA,QAAMS,QAAQ,GAAIC,CAAD,IAAe;AAC5BP,IAAAA,YAAY,CAACO,CAAD,CAAZ;AACAT,IAAAA,cAAc,CAACS,CAAD,CAAd;AACAH,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,OAAO,EAAE;AAACC,QAAAA,UAAU,EAAE;AAAb;AAAhC,KAAD,CAAR;AACH,GAJD;;AAMA,QAAMC,aAAa,GAAG,MAAM;AACxB,QAAIN,MAAJ,EAAY;AACRD,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,OAAO,EAAE;AAACC,UAAAA,UAAU,EAAE;AAAb;AAAhC,OAAD,CAAR;AACH,KAFD,MAEO;AACHN,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,OAAO,EAAE;AAACC,UAAAA,UAAU,EAAEb;AAAb;AAAhC,OAAD,CAAR;AACH;AACJ,GAND;;AAOA,SAAOH,IAAK;AAChB,gDAAgD,MAAMU,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,OAAO,EAAE;AAACC,MAAAA,UAAU,EAAEb;AAAb;AAAhC,GAAD,CAA8D;AAC5H,+BAA+B,MAAMO,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,OAAO,EAAE;AAACC,MAAAA,UAAU,EAAE;AAAb;AAAhC,GAAD,CAAsD;AACnG,2CAA2CC,aAAc;AACzD,8BAA8B,gBAAgBN,MAAM,GAAG,oBAAH,GAA0B,sBAAhD,CAAwE;AACtG,2CAA2CN,SAAU;AACrD;AACA;AACA,yBAA0BM,MAAM,GAAG,uBAAH,GAA6B,iBAAmB;AAChF;AACA;AACA;AACA,8BAA8BT,OAAO,CAACgB,GAAR,CAAY,CAACL,CAAD,EAAYM,GAAZ,KAA4B;AACtC,WAAOnB,IAAK,WAAUmB,GAAI,YAAW,MAAMP,QAAQ,CAACC,CAAD,CAAI,IAAGA,CAAE,OAA5D;AACH,GAFC,CAEC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtBI;AAuBH,CA1CD;;GAAMZ,W;UAEoBF,W,EACLD,W;;;KAHfG,W;AA6CN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { SVState } from \"../../redux/state\"\r\nimport \"./hoverSelect.css\"\r\nimport { html } from 'htm/react'\r\n\r\n\r\ntype Props = {\r\n    choices: string[],\r\n    uniqueName: string,\r\n    selectCallback: (c: string) => void,\r\n}\r\n\r\nconst HoverSelect: React.FunctionComponent<Props> = ({choices, uniqueName, selectCallback, }) => {\r\n    const [currValue, setCurrValue] = useState(\" \")\r\n    const currentlyOpen = useSelector((state: SVState) => state.openSelect)\r\n    const dispatch = useDispatch()\r\n    const isOpen = currentlyOpen === uniqueName\r\n\r\n    const onSelect = (c: string) => {\r\n        setCurrValue(c)\r\n        selectCallback(c)\r\n        dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})\r\n    }\r\n\r\n    const onClickHeader = () => {\r\n        if (isOpen) {\r\n            dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})\r\n        } else {\r\n            dispatch({type: \"changeSelect\", payload: {selectName: uniqueName, }})\r\n        }\r\n    }\r\n    return html`\r\n        <div class=\"hoverSelect\" onMouseEnter=${() => dispatch({type: \"changeSelect\", payload: {selectName: uniqueName, }})}\r\n                onMouseLeave=${() => dispatch({type: \"changeSelect\", payload: {selectName: \"\", }})}>            \r\n            <span class=\"search\" onClick=${onClickHeader}>\r\n                <span class=${\"leftButton\" + (isOpen ? \" hoverSelectActive\" : \" hoverSelectInactive\")}>(-)</span>\r\n                <span class=\"rightLabel\">${currValue}</span>\r\n            </span>\r\n            \r\n            <div class=${(isOpen ? \"hoverSelectMenuActive\" : \"hoverSelectMenu\")}>\r\n                <ul class=\"list\">\r\n                    <li>\r\n                        <ul class=\"optgroup\">\r\n                            ${choices.map((c: string, idx: number) => {\r\n                                return html`<li key=${idx} onClick=${() => onSelect(c)}>${c}</li>`\r\n                            })}\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n                \r\n            \r\n        </div>\r\n    `\r\n}\r\n\r\n\r\nexport default HoverSelect"]},"metadata":{},"sourceType":"module"}